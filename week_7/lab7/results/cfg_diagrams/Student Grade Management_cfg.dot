digraph CFG {
    node [shape=box, style=filled, fillcolor=lightblue];
    rankdir=TB;

    0 [label="B0:\nstruct Student {\n", fillcolor=lightgreen];
    1 [label="B1:\nint id;\nchar name[MAX_NAME];\nint marks[MAX_SUBJECTS];\nfloat average;\nchar grade;\n};\n"];
    2 [label="B2:\nstruct Student students[MAX_STUDENTS];\nint student_count = 0;\nint num_subjects = 3;\nfloat calculate_average(int marks[], int count) {\n"];
    3 [label="B3:\nint sum = 0;\nint i = 0;\nfloat avg = 0.0;\nsum = 0;\ni = 0;\n"];
    4 [label="B4:\nwhile (i < count) {\n"];
    5 [label="B5:\nsum = sum + marks[i];\ni = i + 1;\n}\n"];
    6 [label="B6:\navg = (float)sum / count;\nreturn avg;\n"];
    7 [label="B7:\n}\n"];
    8 [label="B8:\nchar assign_grade(float average) {\n"];
    9 [label="B9:\nchar grade = 'F';\n"];
    10 [label="B10:\nif (average >= 90.0) {\n"];
    11 [label="B11:\ngrade = 'A';\n"];
    12 [label="B12:\n} else if (average >= 80.0) {\n"];
    13 [label="B13:\ngrade = 'B';\n"];
    14 [label="B14:\n} else if (average >= 70.0) {\n"];
    15 [label="B15:\ngrade = 'C';\n"];
    16 [label="B16:\n} else if (average >= 60.0) {\n"];
    17 [label="B17:\ngrade = 'D';\n"];
    18 [label="B18:\n} else {\n"];
    19 [label="B19:\ngrade = 'F';\n}\n"];
    20 [label="B20:\nreturn grade;\n"];
    21 [label="B21:\n}\n"];
    22 [label="B22:\nvoid add_student() {\n"];
    23 [label="B23:\nint i = 0;\nint id = 0;\nchar name[MAX_NAME];\nint marks[MAX_SUBJECTS];\nfloat avg = 0.0;\nchar grade = 'F';\n"];
    24 [label="B24:\nif (student_count >= MAX_STUDENTS) {\n"];
    25 [label="B25:\nprintf(\"Maximum student limit reached!\\n\");\nreturn;\n"];
    26 [label="B26:\n}\n"];
    27 [label="B27:\nprintf(\"\\nEnter student ID: \");\nscanf(\"%d\", &id);\ngetchar();\nprintf(\"Enter student name: \");\nfgets(name, MAX_NAME, stdin);\nname[strcspn(name, \"\\n\")] = 0;\n"];
    28 [label="B28:\nprintf(\"Enter marks for %d subjects:\\n\", num_subjects);\n"];
    29 [label="B29:\ni = 0;\n"];
    30 [label="B30:\nwhile (i < num_subjects) {\n"];
    31 [label="B31:\nprintf(\"Subject %d: \", i + 1);\nscanf(\"%d\", &marks[i]);\ni = i + 1;\n}\n"];
    32 [label="B32:\navg = calculate_average(marks, num_subjects);\ngrade = assign_grade(avg);\nstudents[student_count].id = id;\nstrcpy(students[student_count].name, name);\ni = 0;\n"];
    33 [label="B33:\nwhile (i < num_subjects) {\n"];
    34 [label="B34:\nstudents[student_count].marks[i] = marks[i];\ni = i + 1;\n}\n"];
    35 [label="B35:\nstudents[student_count].average = avg;\nstudents[student_count].grade = grade;\nstudent_count = student_count + 1;\nprintf(\"Student added successfully!\\n\");\n}\n"];
    36 [label="B36:\nvoid display_students() {\n"];
    37 [label="B37:\nint i = 0;\nint j = 0;\n"];
    38 [label="B38:\nif (student_count == 0) {\n"];
    39 [label="B39:\nprintf(\"\\nNo students in the system.\\n\");\nreturn;\n"];
    40 [label="B40:\n}\n"];
    41 [label="B41:\nprintf(\"\\n=== Student Records ===\\n\");\ni = 0;\n"];
    42 [label="B42:\nwhile (i < student_count) {\n"];
    43 [label="B43:\nprintf(\"\\nStudent %d:\\n\", i + 1);\nprintf(\"ID: %d\\n\", students[i].id);\nprintf(\"Name: %s\\n\", students[i].name);\nprintf(\"Marks: \");\nj = 0;\n"];
    44 [label="B44:\nwhile (j < num_subjects) {\n"];
    45 [label="B45:\nprintf(\"%d \", students[i].marks[j]);\nj = j + 1;\n}\n"];
    46 [label="B46:\nprintf(\"\\nAverage: %.2f\\n\", students[i].average);\nprintf(\"Grade: %c\\n\", students[i].grade);\ni = i + 1;\n}\n"];
    47 [label="B47:\n}\n"];
    48 [label="B48:\nvoid search_student() {\n"];
    49 [label="B49:\nint search_id = 0;\nint i = 0;\nint found = 0;\nint j = 0;\nprintf(\"\\nEnter student ID to search: \");\nscanf(\"%d\", &search_id);\nfound = 0;\ni = 0;\n"];
    50 [label="B50:\nwhile (i < student_count && found == 0) {\n"];
    51 [label="B51:\nif (students[i].id == search_id) {\n"];
    52 [label="B52:\nfound = 1;\nprintf(\"\\nStudent Found:\\n\");\nprintf(\"ID: %d\\n\", students[i].id);\nprintf(\"Name: %s\\n\", students[i].name);\nprintf(\"Marks: \");\nj = 0;\n"];
    53 [label="B53:\nwhile (j < num_subjects) {\n"];
    54 [label="B54:\nprintf(\"%d \", students[i].marks[j]);\nj = j + 1;\n}\n"];
    55 [label="B55:\nprintf(\"\\nAverage: %.2f\\n\", students[i].average);\nprintf(\"Grade: %c\\n\", students[i].grade);\n}\n"];
    56 [label="B56:\ni = i + 1;\n}\n"];
    57 [label="B57:\nif (found == 0) {\n"];
    58 [label="B58:\nprintf(\"Student not found!\\n\");\n}\n"];
    59 [label="B59:\n}\n"];
    60 [label="B60:\nvoid calculate_statistics() {\n"];
    61 [label="B61:\nfloat sum = 0.0;\nfloat class_avg = 0.0;\nfloat highest = 0.0;\nfloat lowest = 0.0;\nint i = 0;\nint pass_count = 0;\nint fail_count = 0;\n"];
    62 [label="B62:\nif (student_count == 0) {\n"];
    63 [label="B63:\nprintf(\"\\nNo students in the system.\\n\");\nreturn;\n"];
    64 [label="B64:\n}\n"];
    65 [label="B65:\nsum = 0.0;\nhighest = students[0].average;\nlowest = students[0].average;\npass_count = 0;\nfail_count = 0;\ni = 0;\n"];
    66 [label="B66:\nwhile (i < student_count) {\n"];
    67 [label="B67:\nsum = sum + students[i].average;\n"];
    68 [label="B68:\nif (students[i].average > highest) {\n"];
    69 [label="B69:\nhighest = students[i].average;\n}\n"];
    70 [label="B70:\nif (students[i].average < lowest) {\n"];
    71 [label="B71:\nlowest = students[i].average;\n}\n"];
    72 [label="B72:\nif (students[i].average >= 60.0) {\n"];
    73 [label="B73:\npass_count = pass_count + 1;\n"];
    74 [label="B74:\n} else {\n"];
    75 [label="B75:\nfail_count = fail_count + 1;\n}\n"];
    76 [label="B76:\ni = i + 1;\n}\n"];
    77 [label="B77:\nclass_avg = sum / student_count;\nprintf(\"\\n=== Class Statistics ===\\n\");\nprintf(\"Total Students: %d\\n\", student_count);\nprintf(\"Class Average: %.2f\\n\", class_avg);\nprintf(\"Highest Average: %.2f\\n\", highest);\nprintf(\"Lowest Average: %.2f\\n\", lowest);\nprintf(\"Pass Count: %d\\n\", pass_count);\nprintf(\"Fail Count: %d\\n\", fail_count);\n}\n"];
    78 [label="B78:\nvoid sort_students() {\n"];
    79 [label="B79:\nint i = 0;\nint j = 0;\nstruct Student temp;\nint swapped = 0;\n"];
    80 [label="B80:\nif (student_count == 0) {\n"];
    81 [label="B81:\nprintf(\"\\nNo students to sort.\\n\");\nreturn;\n"];
    82 [label="B82:\n}\n"];
    83 [label="B83:\ni = 0;\n"];
    84 [label="B84:\nwhile (i < student_count - 1) {\n"];
    85 [label="B85:\nswapped = 0;\nj = 0;\n"];
    86 [label="B86:\nwhile (j < student_count - i - 1) {\n"];
    87 [label="B87:\nif (students[j].average < students[j + 1].average) {\n"];
    88 [label="B88:\ntemp = students[j];\nstudents[j] = students[j + 1];\nstudents[j + 1] = temp;\nswapped = 1;\n}\n"];
    89 [label="B89:\nj = j + 1;\n}\n"];
    90 [label="B90:\nif (swapped == 0) {\n"];
    91 [label="B91:\nbreak;\n"];
    92 [label="B92:\n}\n"];
    93 [label="B93:\ni = i + 1;\n}\n"];
    94 [label="B94:\nprintf(\"Students sorted by average (descending order).\\n\"...\n}\n"];
    95 [label="B95:\nvoid display_top_performers() {\n"];
    96 [label="B96:\nint i = 0;\nint count = 0;\nint display_count = 5;\n"];
    97 [label="B97:\nif (student_count == 0) {\n"];
    98 [label="B98:\nprintf(\"\\nNo students in the system.\\n\");\nreturn;\n"];
    99 [label="B99:\n}\n"];
    100 [label="B100:\nsort_students();\n"];
    101 [label="B101:\nprintf(\"\\n=== Top Performers ===\\n\");\n"];
    102 [label="B102:\ncount = student_count;\n"];
    103 [label="B103:\nif (count > display_count) {\n"];
    104 [label="B104:\ncount = display_count;\n}\n"];
    105 [label="B105:\ni = 0;\n"];
    106 [label="B106:\nwhile (i < count) {\n"];
    107 [label="B107:\nprintf(\"%d. %s (ID: %d) - Average: %.2f, Grade: %c\\n\",\ni + 1, students[i].name, students[i].id,\nstudents[i].average, students[i].grade);\ni = i + 1;\n}\n"];
    108 [label="B108:\n}\n"];
    109 [label="B109:\nvoid update_student() {\n"];
    110 [label="B110:\nint search_id = 0;\nint i = 0;\nint j = 0;\nint found = 0;\nint marks[MAX_SUBJECTS];\nfloat avg = 0.0;\nchar grade = 'F';\nprintf(\"\\nEnter student ID to update: \");\nscanf(\"%d\", &search_id);\nfound = 0;\ni = 0;\n"];
    111 [label="B111:\nwhile (i < student_count && found == 0) {\n"];
    112 [label="B112:\nif (students[i].id == search_id) {\n"];
    113 [label="B113:\nfound = 1;\nprintf(\"Current marks: \");\nj = 0;\n"];
    114 [label="B114:\nwhile (j < num_subjects) {\n"];
    115 [label="B115:\nprintf(\"%d \", students[i].marks[j]);\nj = j + 1;\n}\n"];
    116 [label="B116:\nprintf(\"\\n\");\n"];
    117 [label="B117:\nprintf(\"Enter new marks for %d subjects:\\n\", num_subjects...\n"];
    118 [label="B118:\nj = 0;\n"];
    119 [label="B119:\nwhile (j < num_subjects) {\n"];
    120 [label="B120:\nprintf(\"Subject %d: \", j + 1);\nscanf(\"%d\", &marks[j]);\nstudents[i].marks[j] = marks[j];\nj = j + 1;\n}\n"];
    121 [label="B121:\navg = calculate_average(students[i].marks, num_subjects);\ngrade = assign_grade(avg);\nstudents[i].average = avg;\nstudents[i].grade = grade;\nprintf(\"Student marks updated successfully!\\n\");\n}\n"];
    122 [label="B122:\ni = i + 1;\n}\n"];
    123 [label="B123:\nif (found == 0) {\n"];
    124 [label="B124:\nprintf(\"Student not found!\\n\");\n}\n"];
    125 [label="B125:\n}\n"];
    126 [label="B126:\nint main() {\n"];
    127 [label="B127:\nint choice = 0;\nint continue_flag = 1;\n"];
    128 [label="B128:\nprintf(\"=== Student Grade Management System ===\\n\");\nprintf(\"Welcome to the Grade Management System!\\n\");\ncontinue_flag = 1;\n"];
    129 [label="B129:\nwhile (continue_flag == 1) {\n"];
    130 [label="B130:\nprintf(\"\\n=== Main Menu ===\\n\");\nprintf(\"1. Add Student\\n\");\nprintf(\"2. Display All Students\\n\");\nprintf(\"3. Search Student by ID\\n\");\nprintf(\"4. Calculate Class Statistics\\n\");\nprintf(\"5. Sort Students by Average\\n\");\n"];
    131 [label="B131:\nprintf(\"6. Display Top Performers\\n\");\n"];
    132 [label="B132:\nprintf(\"7. Update Student Marks\\n\");\nprintf(\"0. Exit\\n\");\nprintf(\"Enter choice: \");\nscanf(\"%d\", &choice);\n"];
    133 [label="B133:\nif (choice == 1) {\n"];
    134 [label="B134:\nadd_student();\n"];
    135 [label="B135:\n} else if (choice == 2) {\n"];
    136 [label="B136:\ndisplay_students();\n"];
    137 [label="B137:\n} else if (choice == 3) {\n"];
    138 [label="B138:\nsearch_student();\n"];
    139 [label="B139:\n} else if (choice == 4) {\n"];
    140 [label="B140:\ncalculate_statistics();\n"];
    141 [label="B141:\n} else if (choice == 5) {\n"];
    142 [label="B142:\nsort_students();\nprintf(\"Display sorted list? (1=Yes, 0=No): \");\nscanf(\"%d\", &choice);\n"];
    143 [label="B143:\nif (choice == 1) {\n"];
    144 [label="B144:\ndisplay_students();\n}\n"];
    145 [label="B145:\n} else if (choice == 6) {\n"];
    146 [label="B146:\ndisplay_top_performers();\n"];
    147 [label="B147:\n} else if (choice == 7) {\n"];
    148 [label="B148:\nupdate_student();\n"];
    149 [label="B149:\n} else if (choice == 0) {\n"];
    150 [label="B150:\ncontinue_flag = 0;\n"];
    151 [label="B151:\nprintf(\"Exiting system. Thank you!\\n\");\n"];
    152 [label="B152:\n} else {\n"];
    153 [label="B153:\nprintf(\"Invalid choice! Please try again.\\n\");\n}\n"];
    154 [label="B154:\n}\n"];
    155 [label="B155:\nreturn 0;\n"];
    156 [label="B156:\n}\n", fillcolor=lightcoral];

    0 -> 1;
    1 -> 2;
    2 -> 3;
    3 -> 4;
    4 -> 5 [label="true"];
    4 -> 6 [label="false"];
    5 -> 6;
    7 -> 8;
    8 -> 9;
    9 -> 10;
    10 -> 11;
    11 -> 12;
    12 -> 13;
    13 -> 14;
    14 -> 15;
    15 -> 16;
    16 -> 17;
    17 -> 18;
    18 -> 19;
    19 -> 20;
    21 -> 22;
    22 -> 23;
    23 -> 24;
    24 -> 25;
    26 -> 27;
    27 -> 28;
    28 -> 29 [label="true"];
    28 -> 30 [label="false"];
    29 -> 30;
    30 -> 31 [label="true"];
    30 -> 32 [label="false"];
    31 -> 32;
    32 -> 33;
    33 -> 34 [label="true"];
    33 -> 35 [label="false"];
    34 -> 35;
    35 -> 36;
    36 -> 37;
    37 -> 38;
    38 -> 39;
    40 -> 41;
    41 -> 42;
    42 -> 43 [label="true"];
    42 -> 44 [label="false"];
    43 -> 44;
    44 -> 45 [label="true"];
    44 -> 46 [label="false"];
    45 -> 46;
    46 -> 47;
    47 -> 48;
    48 -> 49;
    49 -> 50;
    50 -> 51 [label="true"];
    50 -> 52 [label="false"];
    51 -> 52;
    52 -> 53;
    53 -> 54 [label="true"];
    53 -> 55 [label="false"];
    54 -> 55;
    55 -> 56;
    56 -> 57;
    57 -> 58;
    58 -> 59;
    59 -> 60;
    60 -> 61;
    61 -> 62;
    62 -> 63;
    64 -> 65;
    65 -> 66;
    66 -> 67 [label="true"];
    66 -> 68 [label="false"];
    67 -> 68;
    68 -> 69;
    69 -> 70;
    70 -> 71;
    71 -> 72;
    72 -> 73;
    73 -> 74;
    74 -> 75;
    75 -> 76;
    76 -> 77;
    77 -> 78;
    78 -> 79;
    79 -> 80;
    80 -> 81;
    82 -> 83;
    83 -> 84;
    84 -> 85 [label="true"];
    84 -> 86 [label="false"];
    85 -> 86;
    86 -> 87 [label="true"];
    86 -> 88 [label="false"];
    87 -> 88;
    88 -> 89;
    89 -> 90;
    90 -> 91;
    92 -> 93;
    93 -> 94;
    94 -> 95;
    95 -> 96 [label="true"];
    95 -> 97 [label="false"];
    96 -> 97;
    97 -> 98;
    99 -> 100;
    100 -> 101;
    101 -> 102 [label="true"];
    101 -> 103 [label="false"];
    102 -> 103;
    103 -> 104;
    104 -> 105;
    105 -> 106;
    106 -> 107 [label="true"];
    106 -> 108 [label="false"];
    107 -> 108;
    108 -> 109;
    109 -> 110;
    110 -> 111;
    111 -> 112 [label="true"];
    111 -> 113 [label="false"];
    112 -> 113;
    113 -> 114;
    114 -> 115 [label="true"];
    114 -> 116 [label="false"];
    115 -> 116;
    116 -> 117;
    117 -> 118 [label="true"];
    117 -> 119 [label="false"];
    118 -> 119;
    119 -> 120 [label="true"];
    119 -> 121 [label="false"];
    120 -> 121;
    121 -> 122;
    122 -> 123;
    123 -> 124;
    124 -> 125;
    125 -> 126;
    126 -> 127;
    129 -> 130 [label="true"];
    129 -> 131 [label="false"];
    130 -> 131;
    131 -> 132 [label="true"];
    131 -> 133 [label="false"];
    132 -> 133;
    133 -> 134;
    134 -> 135;
    135 -> 136;
    136 -> 137;
    137 -> 138;
    138 -> 139;
    139 -> 140;
    140 -> 141;
    141 -> 142;
    142 -> 143;
    143 -> 144;
    144 -> 145;
    145 -> 146;
    146 -> 147 [label="true"];
    146 -> 148 [label="false"];
    147 -> 148;
    148 -> 149;
    149 -> 150;
    151 -> 152;
    152 -> 153;
    153 -> 154;
    154 -> 155;
}
