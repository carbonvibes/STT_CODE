digraph CFG {
    node [shape=box, style=filled, fillcolor=lightblue];
    rankdir=TB;

    0 [label="B0:\nint history_count = 0;\n", fillcolor=lightgreen];
    1 [label="B1:\ndouble history_values[MAX_HISTORY];\n"];
    2 [label="B2:\nchar history_operations[MAX_HISTORY];\n"];
    3 [label="B3:\nvoid add_to_history(double value, char operation) {\n"];
    4 [label="B4:\nint i = 0;\n"];
    5 [label="B5:\nif (history_count < MAX_HISTORY) {\n"];
    6 [label="B6:\nhistory_values[history_count] = value;\nhistory_operations[history_count] = operation;\nhistory_count = history_count + 1;\n"];
    7 [label="B7:\n} else {\n"];
    8 [label="B8:\ni = 0;\n"];
    9 [label="B9:\nwhile (i < MAX_HISTORY - 1) {\n"];
    10 [label="B10:\nhistory_values[i] = history_values[i + 1];\nhistory_operations[i] = history_operations[i + 1];\ni = i + 1;\n}\n"];
    11 [label="B11:\nhistory_values[MAX_HISTORY - 1] = value;\nhistory_operations[MAX_HISTORY - 1] = operation;\n}\n"];
    12 [label="B12:\n}\n"];
    13 [label="B13:\nvoid display_history() {\n"];
    14 [label="B14:\nint i = 0;\nprintf(\"\\n=== Operation History ===\\n\");\n"];
    15 [label="B15:\nif (history_count == 0) {\n"];
    16 [label="B16:\nprintf(\"No operations in history.\\n\");\n"];
    17 [label="B17:\n} else {\n"];
    18 [label="B18:\ni = 0;\n"];
    19 [label="B19:\nwhile (i < history_count) {\n"];
    20 [label="B20:\nprintf(\"%d. Operation: %c, Result: %.2f\\n\",\ni + 1, history_operations[i], history_values[i]);\ni = i + 1;\n}\n"];
    21 [label="B21:\n}\n"];
    22 [label="B22:\nprintf(\"========================\\n\");\n}\n"];
    23 [label="B23:\ndouble add(double a, double b) {\n"];
    24 [label="B24:\ndouble result = 0.0;\n"];
    25 [label="B25:\nresult = a + b;\nreturn result;\n"];
    26 [label="B26:\n}\n"];
    27 [label="B27:\ndouble subtract(double a, double b) {\n"];
    28 [label="B28:\ndouble result = 0.0;\n"];
    29 [label="B29:\nresult = a - b;\nreturn result;\n"];
    30 [label="B30:\n}\n"];
    31 [label="B31:\ndouble multiply(double a, double b) {\n"];
    32 [label="B32:\ndouble result = 0.0;\n"];
    33 [label="B33:\nresult = a * b;\nreturn result;\n"];
    34 [label="B34:\n}\n"];
    35 [label="B35:\ndouble divide(double a, double b) {\n"];
    36 [label="B36:\ndouble result = 0.0;\n"];
    37 [label="B37:\nif (b != 0.0) {\n"];
    38 [label="B38:\nresult = a / b;\n"];
    39 [label="B39:\n} else {\n"];
    40 [label="B40:\nprintf(\"Error: Division by zero!\\n\");\nresult = 0.0;\n}\n"];
    41 [label="B41:\nreturn result;\n"];
    42 [label="B42:\n}\n"];
    43 [label="B43:\ndouble calculate_average() {\n"];
    44 [label="B44:\ndouble sum = 0.0;\n"];
    45 [label="B45:\ndouble avg = 0.0;\n"];
    46 [label="B46:\nint i = 0;\n"];
    47 [label="B47:\nif (history_count == 0) {\n"];
    48 [label="B48:\nreturn 0.0;\n"];
    49 [label="B49:\n}\n"];
    50 [label="B50:\ni = 0;\nsum = 0.0;\n"];
    51 [label="B51:\nwhile (i < history_count) {\n"];
    52 [label="B52:\nsum = sum + history_values[i];\ni = i + 1;\n}\n"];
    53 [label="B53:\navg = sum / history_count;\nreturn avg;\n"];
    54 [label="B54:\n}\n"];
    55 [label="B55:\ndouble find_max() {\n"];
    56 [label="B56:\ndouble max = 0.0;\n"];
    57 [label="B57:\nint i = 0;\n"];
    58 [label="B58:\nif (history_count == 0) {\n"];
    59 [label="B59:\nreturn 0.0;\n"];
    60 [label="B60:\n}\n"];
    61 [label="B61:\nmax = history_values[0];\ni = 1;\n"];
    62 [label="B62:\nwhile (i < history_count) {\n"];
    63 [label="B63:\nif (history_values[i] > max) {\n"];
    64 [label="B64:\nmax = history_values[i];\n}\n"];
    65 [label="B65:\ni = i + 1;\n}\n"];
    66 [label="B66:\nreturn max;\n"];
    67 [label="B67:\n}\n"];
    68 [label="B68:\ndouble find_min() {\n"];
    69 [label="B69:\ndouble min = 0.0;\n"];
    70 [label="B70:\nint i = 0;\n"];
    71 [label="B71:\nif (history_count == 0) {\n"];
    72 [label="B72:\nreturn 0.0;\n"];
    73 [label="B73:\n}\n"];
    74 [label="B74:\nmin = history_values[0];\ni = 1;\n"];
    75 [label="B75:\nwhile (i < history_count) {\n"];
    76 [label="B76:\nif (history_values[i] < min) {\n"];
    77 [label="B77:\nmin = history_values[i];\n}\n"];
    78 [label="B78:\ni = i + 1;\n}\n"];
    79 [label="B79:\nreturn min;\n"];
    80 [label="B80:\n}\n"];
    81 [label="B81:\nint main() {\n"];
    82 [label="B82:\nchar operation = ' ';\n"];
    83 [label="B83:\ndouble num1 = 0.0;\n"];
    84 [label="B84:\ndouble num2 = 0.0;\n"];
    85 [label="B85:\ndouble result = 0.0;\n"];
    86 [label="B86:\nint choice = 0;\nint continue_flag = 1;\n"];
    87 [label="B87:\nchar input[MAX_INPUT];\nprintf(\"=== Advanced Calculator ===\\n\");\nprintf(\"Welcome to the calculator program!\\n\\n\");\ncontinue_flag = 1;\n"];
    88 [label="B88:\nwhile (continue_flag == 1) {\n"];
    89 [label="B89:\nprintf(\"\\nSelect operation:\\n\");\nprintf(\"1. Addition (+)\\n\");\nprintf(\"2. Subtraction (-)\\n\");\nprintf(\"3. Multiplication (*)\\n\");\nprintf(\"4. Division (/)\\n\");\nprintf(\"5. View History\\n\");\nprintf(\"6. Calculate Average\\n\");\nprintf(\"7. Find Maximum\\n\");\nprintf(\"8. Find Minimum\\n\");\nprintf(\"9. Clear History\\n\");\nprintf(\"0. Exit\\n\");\nprintf(\"Enter choice: \");\n"];
    90 [label="B90:\nif (fgets(input, MAX_INPUT, stdin) != NULL) {\n"];
    91 [label="B91:\nchoice = atoi(input);\n"];
    92 [label="B92:\n} else {\n"];
    93 [label="B93:\nchoice = 0;\n}\n"];
    94 [label="B94:\nif (choice >= 1 && choice <= 4) {\n"];
    95 [label="B95:\nprintf(\"Enter first number: \");\n"];
    96 [label="B96:\nif (fgets(input, MAX_INPUT, stdin) != NULL) {\n"];
    97 [label="B97:\nnum1 = atof(input);\n}\n"];
    98 [label="B98:\nprintf(\"Enter second number: \");\n"];
    99 [label="B99:\nif (fgets(input, MAX_INPUT, stdin) != NULL) {\n"];
    100 [label="B100:\nnum2 = atof(input);\n}\n"];
    101 [label="B101:\nresult = 0.0;\noperation = ' ';\n"];
    102 [label="B102:\nif (choice == 1) {\n"];
    103 [label="B103:\nresult = add(num1, num2);\noperation = '+';\nprintf(\"Result: %.2f + %.2f = %.2f\\n\", num1, num2, result...\n"];
    104 [label="B104:\n} else if (choice == 2) {\n"];
    105 [label="B105:\nresult = subtract(num1, num2);\noperation = '-';\nprintf(\"Result: %.2f - %.2f = %.2f\\n\", num1, num2, result...\n"];
    106 [label="B106:\n} else if (choice == 3) {\n"];
    107 [label="B107:\nresult = multiply(num1, num2);\noperation = '*';\nprintf(\"Result: %.2f * %.2f = %.2f\\n\", num1, num2, result...\n"];
    108 [label="B108:\n} else if (choice == 4) {\n"];
    109 [label="B109:\nresult = divide(num1, num2);\noperation = '/';\n"];
    110 [label="B110:\nif (num2 != 0.0) {\n"];
    111 [label="B111:\nprintf(\"Result: %.2f / %.2f = %.2f\\n\", num1, num2, result...\n}\n"];
    112 [label="B112:\n}\n"];
    113 [label="B113:\nadd_to_history(result, operation);\n"];
    114 [label="B114:\n} else if (choice == 5) {\n"];
    115 [label="B115:\ndisplay_history();\n"];
    116 [label="B116:\n} else if (choice == 6) {\n"];
    117 [label="B117:\nresult = calculate_average();\nprintf(\"Average of all results: %.2f\\n\", result);\n"];
    118 [label="B118:\n} else if (choice == 7) {\n"];
    119 [label="B119:\nresult = find_max();\nprintf(\"Maximum result: %.2f\\n\", result);\n"];
    120 [label="B120:\n} else if (choice == 8) {\n"];
    121 [label="B121:\nresult = find_min();\nprintf(\"Minimum result: %.2f\\n\", result);\n"];
    122 [label="B122:\n} else if (choice == 9) {\n"];
    123 [label="B123:\nhistory_count = 0;\nprintf(\"History cleared!\\n\");\n"];
    124 [label="B124:\n} else if (choice == 0) {\n"];
    125 [label="B125:\ncontinue_flag = 0;\n"];
    126 [label="B126:\nprintf(\"Thank you for using the calculator!\\n\");\n"];
    127 [label="B127:\n} else {\n"];
    128 [label="B128:\nprintf(\"Invalid choice! Please try again.\\n\");\n}\n"];
    129 [label="B129:\n}\n"];
    130 [label="B130:\nreturn 0;\n"];
    131 [label="B131:\n}\n", fillcolor=lightcoral];

    0 -> 1;
    1 -> 2;
    2 -> 3;
    3 -> 4;
    4 -> 5;
    5 -> 6;
    6 -> 7;
    7 -> 8;
    8 -> 9;
    9 -> 10 [label="true"];
    9 -> 11 [label="false"];
    10 -> 11;
    11 -> 12;
    12 -> 13;
    13 -> 14;
    14 -> 15;
    15 -> 16;
    16 -> 17;
    17 -> 18;
    18 -> 19;
    19 -> 20 [label="true"];
    19 -> 21 [label="false"];
    20 -> 21;
    21 -> 22;
    22 -> 23;
    23 -> 24;
    24 -> 25;
    26 -> 27;
    27 -> 28;
    28 -> 29;
    30 -> 31;
    31 -> 32;
    32 -> 33;
    34 -> 35;
    35 -> 36;
    36 -> 37;
    37 -> 38;
    38 -> 39;
    39 -> 40;
    40 -> 41;
    42 -> 43;
    43 -> 44;
    44 -> 45;
    45 -> 46;
    46 -> 47;
    47 -> 48;
    49 -> 50;
    50 -> 51;
    51 -> 52 [label="true"];
    51 -> 53 [label="false"];
    52 -> 53;
    54 -> 55;
    55 -> 56;
    56 -> 57;
    57 -> 58;
    58 -> 59;
    60 -> 61;
    61 -> 62;
    62 -> 63 [label="true"];
    62 -> 64 [label="false"];
    63 -> 64;
    64 -> 65;
    65 -> 66;
    67 -> 68;
    68 -> 69;
    69 -> 70;
    70 -> 71;
    71 -> 72;
    73 -> 74;
    74 -> 75;
    75 -> 76 [label="true"];
    75 -> 77 [label="false"];
    76 -> 77;
    77 -> 78;
    78 -> 79;
    80 -> 81;
    81 -> 82;
    82 -> 83;
    83 -> 84;
    84 -> 85;
    85 -> 86;
    88 -> 89 [label="true"];
    88 -> 90 [label="false"];
    89 -> 90;
    90 -> 91;
    91 -> 92;
    92 -> 93;
    93 -> 94;
    94 -> 95;
    95 -> 96;
    96 -> 97;
    97 -> 98;
    98 -> 99;
    99 -> 100;
    100 -> 101;
    101 -> 102;
    102 -> 103;
    103 -> 104;
    104 -> 105;
    105 -> 106;
    106 -> 107;
    107 -> 108;
    108 -> 109;
    109 -> 110;
    110 -> 111;
    111 -> 112;
    112 -> 113;
    113 -> 114;
    114 -> 115;
    115 -> 116;
    116 -> 117;
    117 -> 118;
    118 -> 119;
    119 -> 120;
    120 -> 121;
    121 -> 122;
    122 -> 123;
    123 -> 124;
    124 -> 125;
    126 -> 127 [label="true"];
    126 -> 128 [label="false"];
    127 -> 128;
    128 -> 129;
    129 -> 130;
}
