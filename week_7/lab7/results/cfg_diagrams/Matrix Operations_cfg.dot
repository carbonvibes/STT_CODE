digraph CFG {
    node [shape=box, style=filled, fillcolor=lightblue];
    rankdir=TB;

    0 [label="B0:\nint matrix_a[MAX_SIZE][MAX_SIZE];\nint matrix_b[MAX_SIZE][MAX_SIZE];\nint matrix_result[MAX_SIZE][MAX_SIZE];\nvoid initialize_matrix(int mat[MAX_SIZE][MAX_SIZE], int rows...\n", fillcolor=lightgreen];
    1 [label="B1:\nint i = 0;\nint j = 0;\ni = 0;\n"];
    2 [label="B2:\nwhile (i < rows) {\n"];
    3 [label="B3:\nj = 0;\n"];
    4 [label="B4:\nwhile (j < cols) {\n"];
    5 [label="B5:\nmat[i][j] = 0;\nj = j + 1;\n}\n"];
    6 [label="B6:\ni = i + 1;\n}\n"];
    7 [label="B7:\n}\n"];
    8 [label="B8:\nvoid input_matrix(int mat[MAX_SIZE][MAX_SIZE], int rows, int...\n"];
    9 [label="B9:\nint i = 0;\nint j = 0;\n"];
    10 [label="B10:\nprintf(\"\\nEnter elements for Matrix %c (%dx%d):\\n\", name...\n"];
    11 [label="B11:\ni = 0;\n"];
    12 [label="B12:\nwhile (i < rows) {\n"];
    13 [label="B13:\nj = 0;\n"];
    14 [label="B14:\nwhile (j < cols) {\n"];
    15 [label="B15:\nprintf(\"Element [%d][%d]: \", i, j);\nscanf(\"%d\", &mat[i][j]);\nj = j + 1;\n}\n"];
    16 [label="B16:\ni = i + 1;\n}\n"];
    17 [label="B17:\n}\n"];
    18 [label="B18:\nvoid display_matrix(int mat[MAX_SIZE][MAX_SIZE], int rows, i...\n"];
    19 [label="B19:\nint i = 0;\nint j = 0;\nprintf(\"\\nMatrix %c:\\n\", name);\ni = 0;\n"];
    20 [label="B20:\nwhile (i < rows) {\n"];
    21 [label="B21:\nj = 0;\n"];
    22 [label="B22:\nwhile (j < cols) {\n"];
    23 [label="B23:\nprintf(\"%4d \", mat[i][j]);\nj = j + 1;\n}\n"];
    24 [label="B24:\nprintf(\"\\n\");\ni = i + 1;\n}\n"];
    25 [label="B25:\n}\n"];
    26 [label="B26:\nvoid add_matrices(int a[MAX_SIZE][MAX_SIZE], int b[MAX_SIZE]...\nint result[MAX_SIZE][MAX_SIZE], int rows, int cols) {\n"];
    27 [label="B27:\nint i = 0;\nint j = 0;\ni = 0;\n"];
    28 [label="B28:\nwhile (i < rows) {\n"];
    29 [label="B29:\nj = 0;\n"];
    30 [label="B30:\nwhile (j < cols) {\n"];
    31 [label="B31:\nresult[i][j] = a[i][j] + b[i][j];\nj = j + 1;\n}\n"];
    32 [label="B32:\ni = i + 1;\n}\n"];
    33 [label="B33:\n}\n"];
    34 [label="B34:\nvoid subtract_matrices(int a[MAX_SIZE][MAX_SIZE], int b[MAX_...\nint result[MAX_SIZE][MAX_SIZE], int rows, int cols) {\n"];
    35 [label="B35:\nint i = 0;\nint j = 0;\ni = 0;\n"];
    36 [label="B36:\nwhile (i < rows) {\n"];
    37 [label="B37:\nj = 0;\n"];
    38 [label="B38:\nwhile (j < cols) {\n"];
    39 [label="B39:\nresult[i][j] = a[i][j] - b[i][j];\nj = j + 1;\n}\n"];
    40 [label="B40:\ni = i + 1;\n}\n"];
    41 [label="B41:\n}\n"];
    42 [label="B42:\nint multiply_matrices(int a[MAX_SIZE][MAX_SIZE], int b[MAX_S...\nint result[MAX_SIZE][MAX_SIZE],\nint rows_a, int cols_a, int cols_b) {\n"];
    43 [label="B43:\nint i = 0;\nint j = 0;\nint k = 0;\nint sum = 0;\ni = 0;\n"];
    44 [label="B44:\nwhile (i < rows_a) {\n"];
    45 [label="B45:\nj = 0;\n"];
    46 [label="B46:\nwhile (j < cols_b) {\n"];
    47 [label="B47:\nresult[i][j] = 0;\nj = j + 1;\n}\n"];
    48 [label="B48:\ni = i + 1;\n}\n"];
    49 [label="B49:\ni = 0;\n"];
    50 [label="B50:\nwhile (i < rows_a) {\n"];
    51 [label="B51:\nj = 0;\n"];
    52 [label="B52:\nwhile (j < cols_b) {\n"];
    53 [label="B53:\nsum = 0;\nk = 0;\n"];
    54 [label="B54:\nwhile (k < cols_a) {\n"];
    55 [label="B55:\nsum = sum + a[i][k] * b[k][j];\nk = k + 1;\n}\n"];
    56 [label="B56:\nresult[i][j] = sum;\nj = j + 1;\n}\n"];
    57 [label="B57:\ni = i + 1;\n}\n"];
    58 [label="B58:\nreturn 1;\n"];
    59 [label="B59:\n}\n"];
    60 [label="B60:\nvoid transpose_matrix(int mat[MAX_SIZE][MAX_SIZE], int resul...\nint rows, int cols) {\n"];
    61 [label="B61:\nint i = 0;\nint j = 0;\ni = 0;\n"];
    62 [label="B62:\nwhile (i < rows) {\n"];
    63 [label="B63:\nj = 0;\n"];
    64 [label="B64:\nwhile (j < cols) {\n"];
    65 [label="B65:\nresult[j][i] = mat[i][j];\nj = j + 1;\n}\n"];
    66 [label="B66:\ni = i + 1;\n}\n"];
    67 [label="B67:\n}\n"];
    68 [label="B68:\nint diagonal_sum(int mat[MAX_SIZE][MAX_SIZE], int size) {\n"];
    69 [label="B69:\nint sum = 0;\nint i = 0;\ni = 0;\n"];
    70 [label="B70:\nwhile (i < size) {\n"];
    71 [label="B71:\nsum = sum + mat[i][i];\ni = i + 1;\n}\n"];
    72 [label="B72:\nreturn sum;\n"];
    73 [label="B73:\n}\n"];
    74 [label="B74:\nint find_max_element(int mat[MAX_SIZE][MAX_SIZE], int rows, ...\n"];
    75 [label="B75:\nint max = 0;\nint i = 0;\nint j = 0;\nmax = mat[0][0];\ni = 0;\n"];
    76 [label="B76:\nwhile (i < rows) {\n"];
    77 [label="B77:\nj = 0;\n"];
    78 [label="B78:\nwhile (j < cols) {\n"];
    79 [label="B79:\nif (mat[i][j] > max) {\n"];
    80 [label="B80:\nmax = mat[i][j];\n}\n"];
    81 [label="B81:\nj = j + 1;\n}\n"];
    82 [label="B82:\ni = i + 1;\n}\n"];
    83 [label="B83:\nreturn max;\n"];
    84 [label="B84:\n}\n"];
    85 [label="B85:\nint is_symmetric(int mat[MAX_SIZE][MAX_SIZE], int size) {\n"];
    86 [label="B86:\nint i = 0;\nint j = 0;\nint symmetric = 1;\ni = 0;\n"];
    87 [label="B87:\nwhile (i < size && symmetric == 1) {\n"];
    88 [label="B88:\nj = 0;\n"];
    89 [label="B89:\nwhile (j < size && symmetric == 1) {\n"];
    90 [label="B90:\nif (mat[i][j] != mat[j][i]) {\n"];
    91 [label="B91:\nsymmetric = 0;\n}\n"];
    92 [label="B92:\nj = j + 1;\n}\n"];
    93 [label="B93:\ni = i + 1;\n}\n"];
    94 [label="B94:\nreturn symmetric;\n"];
    95 [label="B95:\n}\n"];
    96 [label="B96:\nint main() {\n"];
    97 [label="B97:\nint choice = 0;\nint rows_a = 0;\nint cols_a = 0;\nint rows_b = 0;\nint cols_b = 0;\nint continue_flag = 1;\n"];
    98 [label="B98:\nint result_value = 0;\nprintf(\"=== Matrix Operations Processor ===\\n\");\nprintf(\"Welcome to the matrix calculator!\\n\");\ncontinue_flag = 1;\n"];
    99 [label="B99:\nwhile (continue_flag == 1) {\n"];
    100 [label="B100:\nprintf(\"\\n=== Menu ===\\n\");\nprintf(\"1. Matrix Addition\\n\");\nprintf(\"2. Matrix Subtraction\\n\");\nprintf(\"3. Matrix Multiplication\\n\");\nprintf(\"4. Matrix Transpose\\n\");\nprintf(\"5. Diagonal Sum\\n\");\nprintf(\"6. Find Maximum Element\\n\");\nprintf(\"7. Check Symmetric Matrix\\n\");\nprintf(\"0. Exit\\n\");\nprintf(\"Enter choice: \");\nscanf(\"%d\", &choice);\n"];
    101 [label="B101:\nif (choice >= 1 && choice <= 3) {\n"];
    102 [label="B102:\nprintf(\"Enter dimensions for Matrix A (rows cols): \");\n"];
    103 [label="B103:\nscanf(\"%d %d\", &rows_a, &cols_a);\n"];
    104 [label="B104:\nif (rows_a <= 0 || rows_a > MAX_SIZE || cols_a <= 0 || cols_...\n"];
    105 [label="B105:\nprintf(\"Invalid dimensions!\\n\");\n"];
    106 [label="B106:\n} else {\n"];
    107 [label="B107:\nprintf(\"Enter dimensions for Matrix B (rows cols): \");\n"];
    108 [label="B108:\nscanf(\"%d %d\", &rows_b, &cols_b);\n"];
    109 [label="B109:\nif (rows_b <= 0 || rows_b > MAX_SIZE || cols_b <= 0 || cols_...\n"];
    110 [label="B110:\nprintf(\"Invalid dimensions!\\n\");\n"];
    111 [label="B111:\n} else {\n"];
    112 [label="B112:\nif (choice == 1 || choice == 2) {\n"];
    113 [label="B113:\nif (rows_a != rows_b || cols_a != cols_b) {\n"];
    114 [label="B114:\nprintf(\"Matrices must have same dimensions for addition/sub...\n"];
    115 [label="B115:\n} else {\n"];
    116 [label="B116:\ninput_matrix(matrix_a, rows_a, cols_a, 'A');\ninput_matrix(matrix_b, rows_b, cols_b, 'B');\n"];
    117 [label="B117:\nif (choice == 1) {\n"];
    118 [label="B118:\nadd_matrices(matrix_a, matrix_b, matrix_result, rows_a, cols...\nprintf(\"\\nResult of Addition:\\n\");\n"];
    119 [label="B119:\n} else {\n"];
    120 [label="B120:\nsubtract_matrices(matrix_a, matrix_b, matrix_result, rows_a,...\nprintf(\"\\nResult of Subtraction:\\n\");\n}\n"];
    121 [label="B121:\ndisplay_matrix(matrix_result, rows_a, cols_a, 'R');\n}\n"];
    122 [label="B122:\n} else if (choice == 3) {\n"];
    123 [label="B123:\nif (cols_a != rows_b) {\n"];
    124 [label="B124:\nprintf(\"Invalid dimensions for multiplication!\\n\");\n"];
    125 [label="B125:\nprintf(\"Columns of A must equal rows of B.\\n\");\n"];
    126 [label="B126:\n} else {\n"];
    127 [label="B127:\ninput_matrix(matrix_a, rows_a, cols_a, 'A');\ninput_matrix(matrix_b, rows_b, cols_b, 'B');\nresult_value = multiply_matrices(matrix_a, matrix_b, matrix_...\nrows_a, cols_a, cols_b);\n"];
    128 [label="B128:\nif (result_value == 1) {\n"];
    129 [label="B129:\nprintf(\"\\nResult of Multiplication:\\n\");\ndisplay_matrix(matrix_result, rows_a, cols_b, 'R');\n}\n"];
    130 [label="B130:\n}\n"];
    131 [label="B131:\n}\n"];
    132 [label="B132:\n}\n"];
    133 [label="B133:\n}\n"];
    134 [label="B134:\n} else if (choice == 4) {\n"];
    135 [label="B135:\nprintf(\"Enter dimensions for Matrix (rows cols): \");\n"];
    136 [label="B136:\nscanf(\"%d %d\", &rows_a, &cols_a);\n"];
    137 [label="B137:\nif (rows_a <= 0 || rows_a > MAX_SIZE || cols_a <= 0 || cols_...\n"];
    138 [label="B138:\nprintf(\"Invalid dimensions!\\n\");\n"];
    139 [label="B139:\n} else {\n"];
    140 [label="B140:\ninput_matrix(matrix_a, rows_a, cols_a, 'A');\ntranspose_matrix(matrix_a, matrix_result, rows_a, cols_a);\nprintf(\"\\nTranspose of Matrix:\\n\");\ndisplay_matrix(matrix_result, cols_a, rows_a, 'T');\n}\n"];
    141 [label="B141:\n} else if (choice == 5) {\n"];
    142 [label="B142:\nprintf(\"Enter size of square matrix: \");\nscanf(\"%d\", &rows_a);\n"];
    143 [label="B143:\nif (rows_a <= 0 || rows_a > MAX_SIZE) {\n"];
    144 [label="B144:\nprintf(\"Invalid size!\\n\");\n"];
    145 [label="B145:\n} else {\n"];
    146 [label="B146:\ncols_a = rows_a;\ninput_matrix(matrix_a, rows_a, cols_a, 'A');\nresult_value = diagonal_sum(matrix_a, rows_a);\nprintf(\"\\nDiagonal sum: %d\\n\", result_value);\n}\n"];
    147 [label="B147:\n} else if (choice == 6) {\n"];
    148 [label="B148:\nprintf(\"Enter dimensions for Matrix (rows cols): \");\n"];
    149 [label="B149:\nscanf(\"%d %d\", &rows_a, &cols_a);\n"];
    150 [label="B150:\nif (rows_a <= 0 || rows_a > MAX_SIZE || cols_a <= 0 || cols_...\n"];
    151 [label="B151:\nprintf(\"Invalid dimensions!\\n\");\n"];
    152 [label="B152:\n} else {\n"];
    153 [label="B153:\ninput_matrix(matrix_a, rows_a, cols_a, 'A');\nresult_value = find_max_element(matrix_a, rows_a, cols_a);\nprintf(\"\\nMaximum element: %d\\n\", result_value);\n}\n"];
    154 [label="B154:\n} else if (choice == 7) {\n"];
    155 [label="B155:\nprintf(\"Enter size of square matrix: \");\nscanf(\"%d\", &rows_a);\n"];
    156 [label="B156:\nif (rows_a <= 0 || rows_a > MAX_SIZE) {\n"];
    157 [label="B157:\nprintf(\"Invalid size!\\n\");\n"];
    158 [label="B158:\n} else {\n"];
    159 [label="B159:\ncols_a = rows_a;\ninput_matrix(matrix_a, rows_a, cols_a, 'A');\nresult_value = is_symmetric(matrix_a, rows_a);\n"];
    160 [label="B160:\nif (result_value == 1) {\n"];
    161 [label="B161:\nprintf(\"\\nMatrix is symmetric.\\n\");\n"];
    162 [label="B162:\n} else {\n"];
    163 [label="B163:\nprintf(\"\\nMatrix is not symmetric.\\n\");\n}\n"];
    164 [label="B164:\n}\n"];
    165 [label="B165:\n} else if (choice == 0) {\n"];
    166 [label="B166:\ncontinue_flag = 0;\n"];
    167 [label="B167:\nprintf(\"Exiting program. Thank you!\\n\");\n"];
    168 [label="B168:\n} else {\n"];
    169 [label="B169:\nprintf(\"Invalid choice! Please try again.\\n\");\n}\n"];
    170 [label="B170:\n}\n"];
    171 [label="B171:\nreturn 0;\n"];
    172 [label="B172:\n}\n", fillcolor=lightcoral];

    0 -> 1;
    1 -> 2;
    2 -> 3 [label="true"];
    2 -> 4 [label="false"];
    3 -> 4;
    4 -> 5 [label="true"];
    4 -> 6 [label="false"];
    5 -> 6;
    6 -> 7;
    7 -> 8;
    8 -> 9;
    9 -> 10;
    10 -> 11 [label="true"];
    10 -> 12 [label="false"];
    11 -> 12;
    12 -> 13 [label="true"];
    12 -> 14 [label="false"];
    13 -> 14;
    14 -> 15 [label="true"];
    14 -> 16 [label="false"];
    15 -> 16;
    16 -> 17;
    17 -> 18;
    18 -> 19;
    19 -> 20;
    20 -> 21 [label="true"];
    20 -> 22 [label="false"];
    21 -> 22;
    22 -> 23 [label="true"];
    22 -> 24 [label="false"];
    23 -> 24;
    24 -> 25;
    25 -> 26;
    26 -> 27;
    27 -> 28;
    28 -> 29 [label="true"];
    28 -> 30 [label="false"];
    29 -> 30;
    30 -> 31 [label="true"];
    30 -> 32 [label="false"];
    31 -> 32;
    32 -> 33;
    33 -> 34;
    34 -> 35;
    35 -> 36;
    36 -> 37 [label="true"];
    36 -> 38 [label="false"];
    37 -> 38;
    38 -> 39 [label="true"];
    38 -> 40 [label="false"];
    39 -> 40;
    40 -> 41;
    41 -> 42;
    42 -> 43;
    43 -> 44;
    44 -> 45 [label="true"];
    44 -> 46 [label="false"];
    45 -> 46;
    46 -> 47 [label="true"];
    46 -> 48 [label="false"];
    47 -> 48;
    48 -> 49;
    49 -> 50;
    50 -> 51 [label="true"];
    50 -> 52 [label="false"];
    51 -> 52;
    52 -> 53 [label="true"];
    52 -> 54 [label="false"];
    53 -> 54;
    54 -> 55 [label="true"];
    54 -> 56 [label="false"];
    55 -> 56;
    56 -> 57;
    57 -> 58;
    59 -> 60;
    60 -> 61;
    61 -> 62;
    62 -> 63 [label="true"];
    62 -> 64 [label="false"];
    63 -> 64;
    64 -> 65 [label="true"];
    64 -> 66 [label="false"];
    65 -> 66;
    66 -> 67;
    67 -> 68;
    68 -> 69;
    69 -> 70;
    70 -> 71 [label="true"];
    70 -> 72 [label="false"];
    71 -> 72;
    73 -> 74;
    74 -> 75;
    75 -> 76;
    76 -> 77 [label="true"];
    76 -> 78 [label="false"];
    77 -> 78;
    78 -> 79 [label="true"];
    78 -> 80 [label="false"];
    79 -> 80;
    80 -> 81;
    81 -> 82;
    82 -> 83;
    84 -> 85;
    85 -> 86;
    86 -> 87;
    87 -> 88 [label="true"];
    87 -> 89 [label="false"];
    88 -> 89;
    89 -> 90 [label="true"];
    89 -> 91 [label="false"];
    90 -> 91;
    91 -> 92;
    92 -> 93;
    93 -> 94;
    95 -> 96;
    96 -> 97;
    99 -> 100 [label="true"];
    99 -> 101 [label="false"];
    100 -> 101;
    101 -> 102;
    102 -> 103 [label="true"];
    102 -> 104 [label="false"];
    103 -> 104;
    104 -> 105;
    105 -> 106;
    106 -> 107;
    107 -> 108 [label="true"];
    107 -> 109 [label="false"];
    108 -> 109;
    109 -> 110;
    110 -> 111;
    111 -> 112;
    112 -> 113;
    113 -> 114;
    114 -> 115 [label="true"];
    114 -> 116 [label="false"];
    115 -> 116;
    116 -> 117;
    117 -> 118;
    118 -> 119;
    119 -> 120;
    120 -> 121;
    121 -> 122;
    122 -> 123;
    123 -> 124;
    124 -> 125 [label="true"];
    124 -> 126 [label="false"];
    125 -> 126;
    126 -> 127;
    127 -> 128;
    128 -> 129;
    129 -> 130;
    130 -> 131;
    131 -> 132;
    132 -> 133;
    133 -> 134;
    134 -> 135;
    135 -> 136 [label="true"];
    135 -> 137 [label="false"];
    136 -> 137;
    137 -> 138;
    138 -> 139;
    139 -> 140;
    140 -> 141;
    141 -> 142;
    142 -> 143;
    143 -> 144;
    144 -> 145;
    145 -> 146;
    146 -> 147;
    147 -> 148;
    148 -> 149 [label="true"];
    148 -> 150 [label="false"];
    149 -> 150;
    150 -> 151;
    151 -> 152;
    152 -> 153;
    153 -> 154;
    154 -> 155;
    155 -> 156;
    156 -> 157;
    157 -> 158;
    158 -> 159;
    159 -> 160;
    160 -> 161;
    161 -> 162;
    162 -> 163;
    163 -> 164;
    164 -> 165;
    165 -> 166;
    167 -> 168;
    168 -> 169;
    169 -> 170;
    170 -> 171;
}
